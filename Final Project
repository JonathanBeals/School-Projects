#-------------------------------------------------------------------------------
# Name:        Final Project
# Purpose:
#
# Author:      Jonathan Beals
#
# Created:     29/10/2023
# Copyright:   (c) JonBe 2023
# Licence:     <your licence>
#-------------------------------------------------------------------------------

def main():
    pass

if __name__ == '__main__':
    main()

import turtle
import tkinter as tk
import random
import time

# Get user name and turtle number.
def user_input():
    user_name = input("Enter your name: ")

    # Get turtle choice.
    print("Choose a turtle to bet on:")
    print("1 - Turtle 1")
    print("2 - Turtle 2")
    print("3 - Turtle 3")
    print("4 - Turtle 4")
    print("5 - Turtle 5")

    turtle_choice = int(input("Choose a Turtle. 1-5: "))
    return user_name, turtle_choice

# Write and read bet_ammount.txt file.
def betting_pool(bet):
    try:
        with open('bet_amount.txt', 'r') as file:
            file_content = file.read().strip()
            current_amount = int(file_content) if file_content else 0
    except FileNotFoundError:
        current_amount = 0

    random_bets = [random.randint(10, 200) for _ in range(3)]
    total_amount = current_amount + bet + sum(random_bets)

    with open('bet_amount.txt', 'w') as file:
        file.write(str(total_amount))

# Print Turtle Race.
def print_word(word, x, y, tess, font=("Arial", 44, "bold")):
    tess.color("white")
    tess.penup()
    tess.goto(x, y)
    tess.write(word, align="center", font=font)
    tess.hideturtle()

# Setup winner message.
def display_winner_message(message, x, y, font=("Arial", 44, "bold"), winner_turtle=None):
    if winner_turtle:
        winner_turtle.clear()
        winner_turtle.goto(x, y)
        winner_turtle.write(message, align="center", font=font)
        winner_turtle.hideturtle()
    else:
        new_winner_turtle = turtle.Turtle()
        new_winner_turtle.color("white")
        new_winner_turtle.penup()
        new_winner_turtle.goto(x, y)
        new_winner_turtle.write(message, align="center", font=font)
        new_winner_turtle.hideturtle()
        return new_winner_turtle

# Clear winner message off screen.
def clear_winner_message(winner_turtle):
    winner_turtle.clear()

# Move turtles back to starting line.
def reset_turtle_position(turtles):
    for turtle in turtles:
        turtle.goto(-640, turtle.ycor())

# Setup of turtle screen.
def screen_setup():
    global tess, keke, alex, turtle1, turtle2, turtle3, turtle4, turtle5, wn

    turtle.resetscreen()

    wn = turtle.Screen()
    wn.setup(1400,700)

    #Print Turtle Number.
    def print_number(word, x, y, font=("Arial", 32, "bold")):
        keke.color("white", "black")
        keke.penup()
        keke.goto(x, y)
        keke.write(word, align="center", font=font)
        keke.hideturtle()

    # Set up tess.
    tess = turtle.Turtle()
    tess.color("black")
    tess.pensize(3)
    tess.speed(10)
    tess.penup()
    tess.speed(1000)
    wn = turtle.Screen()
    wn.setup(1400,700)
    turtle.bgpic("background.gif")
    print_word("Turtle Race!!", 0, 270, tess)
    tess.left(90)
    tess.hideturtle()

    #Set up keke.
    keke = turtle.Turtle()


    #Bring window to the front
    #For some reason the window opens behind pyscripter.
    rootwindow = wn.getcanvas().winfo_toplevel()
    rootwindow.call('wm', 'attributes', '.', '-topmost', '1')
    rootwindow.call('wm', 'attributes', '.', '-topmost', '0')

    #Set up alex.
    alex = turtle.Turtle()
    alex.color("white", "sienna3")
    alex.pensize(3)
    alex.penup()
    alex.speed(10)
    wn = turtle.Screen()
    wn.setup(1400,750)
    alex.goto(-700, -205)
    alex.hideturtle()

    # Function to draw a rectangle for the track.
    def draw_rectangle():
        alex.pendown()
        alex.begin_fill()
        for _ in range(2):
            alex.forward(1500)
            alex.left(90)
            alex.forward(80)
            alex.left(90)
        alex.end_fill()

    # Function to draw the track.
    def draw_track():
        for _ in range(5):
            draw_rectangle()
            alex.penup()
            alex.goto(-700, alex.ycor() + 83)

    # Draw track
    draw_track()


    print_number("1", -660, 140)
    print_number("2", -660, 60)
    print_number("3", -660, -25)
    print_number("4", -660, -110)
    print_number("5", -660, -190)

    # Function to draw a square for the start and finish lines.
    def draw_square(size, color):
        for i in range(4):
            tess.forward(20)
            tess.right(90)

    #Draw checkerboard line for start and finish.
    def draw_checkerboard_line(turtle, color1, color2, x, y1, y2, num_squares):
        turtle.penup()
        turtle.goto(x, y1)

        for i in range(num_squares):
            if i % 2 == 0:
                turtle.color(color1)
            else:
                turtle.color(color2)

            turtle.pendown()
            turtle.begin_fill()
            for b in range(4):
                turtle.forward(20)
                turtle.right(90)
            turtle.end_fill()
            turtle.forward(20)



    # Draw start line.
    draw_checkerboard_line(tess, "black", "white", -600, -200, 300, 20)
    draw_checkerboard_line(tess, "white", "black", -580, -200, 300, 20)

    # Draw finish line.
    draw_checkerboard_line(tess, "black", "white", 670, -200, 30, 20)
    draw_checkerboard_line(tess, "white", "black", 650, -200, 30, 20)


    # Create turtles.
    turtle1 = turtle.Turtle()
    turtle2 = turtle.Turtle()
    turtle3 = turtle.Turtle()
    turtle4 = turtle.Turtle()
    turtle5 = turtle.Turtle()

    # Setup turtles.
    def setup_turtle(turtle, color, start_pos):
        turtle.shape("turtle")
        turtle.color(color)
        turtle.penup()
        turtle.goto(start_pos)

    # Position turtles.
    setup_turtle(turtle1, "deepskyblue", (-640, 172))
    setup_turtle(turtle2, "mediumpurple", (-640, 85))
    setup_turtle(turtle3, "black", (-640, 0))
    setup_turtle(turtle4, "crimson", (-640, -85))
    setup_turtle(turtle5, "slategrey", (-640, -172))

    bet_amount = 0
    try:
        with open('bet_amount.txt', 'r') as file:
            bet_amount = int(file.read())
            print_word(f"Betting Pool: ${bet_amount}", 0, 200, tess)
    except FileNotFoundError:
            pass

    print_word(f"Betting Pool: ${bet_amount}", 0, 200, tess)

    return wn, tess, keke, alex, turtle1, turtle2, turtle3, turtle4, turtle5

# Function for the race.
def race_game(turtle1, turtle2, turtle3, turtle4, turtle5):
    global user_name, turtle_choice

    # Check which turtle crossed finish line first.
    def crossed_finish_line(turtle, finish_line_x):
        return turtle.xcor() >= finish_line_x

    finish_line_x = 660
    winning_turtle = None

    # Move turtles forward at random.
    while True:
        turtle1.forward(random.randint(0, 60))
        turtle2.forward(random.randint(0, 60))
        turtle3.forward(random.randint(0, 60))
        turtle4.forward(random.randint(0, 60))
        turtle5.forward(random.randint(0, 60))

        if any(crossed_finish_line(t, finish_line_x) for t in [turtle1, turtle2, turtle3, turtle4, turtle5]):
            for i, turtle in enumerate([turtle1, turtle2, turtle3, turtle4, turtle5], 1):
                if crossed_finish_line(turtle, finish_line_x):
                    winning_turtle = i
                    break
            break

    # Check if user's turtle wins and winner message.
    user_wins = False
    if winning_turtle == turtle_choice:
        user_wins = True
        congrats_message = f"Congrats, {user_name}! Your turtle won!"
        winner_display = display_winner_message(congrats_message, 0, -40)
        time.sleep(2)
        if winner_display:
            clear_winner_message(winner_display)

    # Show winner message only if the user wins.
    if user_wins:
        return winning_turtle, user_wins

    # Display winner message if the user didn't win.
    winner_message = f"The Winner is Turtle # {winning_turtle}."
    winner_display = display_winner_message(winner_message, 0, -40)
    time.sleep(1)
    if winner_display:
        clear_winner_message(winner_display)

    reset_turtle_position([turtle1, turtle2, turtle3, turtle4, turtle5])
    return winning_turtle, user_wins

# Setup game for another race if user wants to play again.
def restart_game(turtles, winner_display=None):
    global user_name, turtle_choice, wn
    reset_turtle_position(turtles)

    while True:
        if winner_display:
            clear_winner_message(winner_display)

        play_again = input("Do you want to play again? Yes/No: ").lower()
        if play_again == "no":
            wn.bye()
            return
        elif play_again != "yes":
            continue

        reset_turtle_position(turtles)
        if winner_display:
            clear_winner_message(winner_display)

        winning_turtle, user_wins = race_game(*turtles)
        if user_wins:
            congrats_message = f"Congrats, {user_name}! Your turtle won!"
            winner_display = display_winner_message(congrats_message, 0, -40)

        winner_message = f"The Winner is Turtle # {winning_turtle}."
        winner_display = display_winner_message(winner_message, 0, -40)

# Function to control how the program logic flows
def main():
    global user_name, turtle_choice, wn, turtle1, turtle2, turtle3, turtle4, turtle5, tess, keke, alex, root
    root = tk.Tk()
    root.withdraw()

    while True:
        user_name, turtle_choice = user_input()
        bet = int(input("How much would you like to bet? $"))
        betting_pool(bet)
        wn, tess, keke, alex, turtle1, turtle2, turtle3, turtle4, turtle5 = screen_setup()
        turtles = [turtle1, turtle2, turtle3, turtle4, turtle5]
        winning_turtle, user_wins = race_game(*turtles)
        luna = f"The Winner is Turtle # {winning_turtle}."
        winner_display = display_winner_message(luna, 0, -40)
        restart_game(turtles, winner_display)
        root.destroy()
        break


    root.mainloop()

if __name__ == "__main__":
    main()
